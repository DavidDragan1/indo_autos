<?php

defined('BASEPATH') OR exit('No direct script access allowed');

/* Author: Khairul Azam
 * Date : 2016-10-13
 */

class Auth extends MX_Controller {

    function __construct() {
        parent::__construct();
        $this->load->model('Auth_model');
        $this->load->library('form_validation');
    }

    public function login() {
        ob_start();
        
         $method = $_SERVER['REQUEST_METHOD'];
       
      //   ajaxAuthorized();
        //sleep(1);
        /*
         * Stop Brute Force Attract   // by sleeping now... 
         * will add account deactivation letter      
         */
        $data = $this->session->flashdata('login');
        if($this->session->flashdata('login')) {
            $username =  $data['username'];
            $password =  $data['password'];
        } else{
            $username = $this->security->xss_clean($this->input->post('username'));
            $password = $this->security->xss_clean($this->input->post('password'));
        }
        
        $remember = ($this->input->post('remember')) ? (60 * 60 * 24 * 7) : 0;

        if (!filter_var($username, FILTER_VALIDATE_EMAIL)) {
            echo ajaxRespond('Fail', '<p class="ajax_error">Please enter a valid user name</p>');
            exit;
        }

        if ($username) {
            $userdata = $this->Auth_model->validateUser($username);
            if (count($userdata)) {
                if (password_verify($password, $userdata->password)) {
                    if ($userdata->status === 'Active') {

                        $history_id = $this->login_history( $userdata->id, $userdata->role_id );
                        
                        $cookie_data = json_encode([
                            'user_id' 	=> $userdata->id,
                            'user_mail' => $userdata->email,
                            'role_id' 	=> $userdata->role_id,
                            'name' 	=> $userdata->first_name . ' ' . $userdata->last_name,
                            'photo' 	=> $userdata->profile_photo,
                            'history' 	=> $history_id
                        ]);

                        $cookie = [
                            'name' 	=> 'login_data',
                            'value' 	=> base64_encode($cookie_data),
                            'expire' 	=> $remember,
                            'secure' 	=> false
                        ];

                        $this->input->set_cookie($cookie);
                        $this->session->set_userdata($cookie);

                        if( $this->session->userdata('re_url') ) {
                           echo ajaxRespond('URL', $this->session->userdata('re_url')); 
                        } else {
                            
                            $current_status = array(
                                    'current_status' => 'Online'
                            );

                            $this->db->where('id', $userdata->id);
                            $this->db->update('users', $current_status);
                                                        
                            $api_cookie_data = [
                                'user_id' 	=> $userdata->id,
                                'user_mail' => $userdata->email,
                                'role_id' 	=> $userdata->role_id,
                                'name' 	=> $userdata->first_name . ' ' . $userdata->last_name,
                                'photo' 	=> base_url('/').'/uploads/users_profile/'.$userdata->profile_photo,
                                'current_status' 	=> 'Online'
                            ];
                            
                            if($method != 'POST'){
                                    json_output_display(400,array('status' => 400,'message' => 'Bad request.'));
                            } else {
                                
                                if($this->input->get('device_code', TRUE)){
                                    if( DEVICE_AUTH == $this->input->get('device_code', TRUE) && $method == 'POST' ) {
                                       json_output_display( 200 ,$api_cookie_data);                                      
                                    }
                                     exit;
                                } 
                            } 

                            
                            echo ajaxRespond('OK', '<p class="ajax_success">Login Success</p>');
                        }
                       // $this->session->unset_flashdata('login');
                        // Save Session and refresh
                    } else {
                        echo ajaxRespond('Fail', '<p class="ajax_error">Your account is inactive.</p>');
                    }
                } else {
                    echo ajaxRespond('Fail', '<p class="ajax_error">Incorrect Password!</p>');
                }
            } else {
                echo ajaxRespond('Fail', '<p class="ajax_error">Incorrect Username!</p>');
            }
        } else {
            echo ajaxRespond('Fail', '<p class="ajax_error">Please enter valid username!</p>');
        }
    }

 
    public function sign_up(){
	// ob_start();
       //  ajaxAuthorized();
        $this->_rules();
        
        if ($this->form_validation->run() == FALSE) {             
            $valid = [
                'first_name' => form_error('first_name'),
                'your_email' => form_error('your_email'),
                'password'   => form_error('password'),
                'passconf'   => form_error('passconf'),
                'role_id'    => form_error('role_id'),
            ];
            
            // mail function add here
            echo ( json_encode( $valid ) );
           
        } else { 
            $user_id = $this->create();
            echo $this->auto_login( $user_id );
        }
	// ob_clean();
    }
    
    private function notification_email(){
        $data = [ 
            'role_id'       => $this->input->post('role_id', TRUE),
            'first_name'    => $this->input->post('first_name', TRUE),
            'last_name'     => $this->input->post('last_name', TRUE),
            // 'user_id'       => $this->db->insert_id()
            ];
        
        $this->session->set_flashdata('data',$data);
        redirect('mail/welcome_mail') ; 
    }


    private function auto_login( $user_id ){
        $username = $this->security->xss_clean($this->input->post('your_email'));
        $password = $this->security->xss_clean($this->input->post('password'));
        $remember = (60 * 60 * 24 * 7);
        
        
        $cookie_data = json_encode([
            'user_id'   => $user_id,
            'role_id'   => intval( $this->input->post('role_id') ),
            'user_mail' => $username,
            'name'      => $this->input->post('first_name') . ' ' . $this->input->post('last_name') ,
            'photo'     => 'no-photo.gif'
        ]);

        $cookie = [
            'name'      => 'login_data',
            'value'     => base64_encode($cookie_data),
            'expire'    => $remember,
            'secure'    => false
        ];

        $this->input->set_cookie($cookie);
        $this->session->set_userdata($cookie);
        
        return ajaxRespond('OK', '<p class="ajax_error">Auto login success</p>');                
    }

    public function logout() {
        
        $current_status = array('current_status' => 'Offline');
        $this->db->where('id', getLoginUserData('user_id'));
        $this->db->update('users', $current_status);
        
        $cookie = [
            'name'      => 'login_data',
            'value'     => false,
            'expire'    => -84000,
            'secure'    => false
        ];
        $this->logout_history();
        $this->input->set_cookie($cookie);        
        $this->session->unset_userdata('name');
        $this->session->unset_userdata('value'); 
        $this->session->unset_userdata('expire'); 
        $this->session->unset_userdata('secure');    
      $this->session->unset_userdata('re_url');
      
      //dd($cookie);
      
      redirect(site_url(), 'refresh');
    }

    public function login_form() {
        $this->load->view('auth/login');
    }
    
    private function create(){    
        
        $method = $_SERVER['REQUEST_METHOD'];
        
        $user_data = [
            'role_id'       => $this->input->post('role_id', TRUE),            
            'first_name'    => $this->input->post('first_name', TRUE),
            'last_name'     => $this->input->post('last_name', TRUE),
            'email'         => $this->input->post('your_email', TRUE),
            'contact'       => $this->input->post('your_contact', TRUE),
            'password'      => password_encription( $this->input->post('password', TRUE) ),
            'status'        => 'Active',
            'created'       => date('Y-m-d H:i:s'),
        ];
        $this->Auth_model->sign_up( $user_data );
        
        $user_id = $this->db->insert_id();
        $user_data['user_id'] = $user_id;
        
        
        $userData = [
            'role_id'       => $this->input->post('role_id', TRUE),            
            'first_name'    => $this->input->post('first_name', TRUE),
            'last_name'     => $this->input->post('last_name', TRUE),
            'email'         => $this->input->post('your_email', TRUE),           
            'password'      => password_encription($this->input->post('password', TRUE)),           
            'raw_pass'      => $this->input->post('password', TRUE) ,           
            'user_id'       => $user_id,           
            'url'           => site_url().'/my_account',           
        ];
        
        $userDataApi = [
            'role_id'       => $this->input->post('role_id', TRUE),            
            'role_name'       => getRoleName( $this->input->post('role_id', TRUE) ),            
            'first_name'    => $this->input->post('first_name', TRUE),
            'last_name'     => $this->input->post('last_name', TRUE),
            'email'         => $this->input->post('your_email', TRUE),           
            'password'      => password_encription($this->input->post('password', TRUE)),           
            'raw_pass'      => $this->input->post('password', TRUE) ,           
            'user_id'       => $user_id,           
             'status'        => 'Active',
            'created'       => date('Y-m-d H:i:s'),
            'url'           => site_url().'/my_account',           
        ];
        
        
          if($method != 'POST'){
                    json_output_display(400,array('status' => 400,'message' => 'Bad request.'));
            } else {

                if($this->input->get('device_code', TRUE)){
                    if( DEVICE_AUTH == $this->input->get('device_code', TRUE) && $method == 'POST' ) {
                       json_output_display( 200 ,$userDataApi);                                      
                    }
                     exit;
                } 
            } 
        
        
        Modules::run('mail/welcome_mails', $userData );                     
        return $user_id;
    }
    
    
    public function _rules(){         	
        $this->form_validation->set_rules('first_name', 'first name', 'trim|required');		
        $this->form_validation->set_rules('your_email', 'your email', 'trim|valid_email|required|is_unique[users.email]', 
                [ 'is_unique' => 'This email already in used', 'valid_email' => 'Please enter a valid email address']);
	
		// $this->form_validation->set_rules('role_id', 'role_id', 'required|less_than[7]|greater_than[3]');
        $this->form_validation->set_rules('role_id', 'role_id', 'required|less_than[9]|greater_than[3]');
        
        $this->form_validation->set_rules('password', 'password field', 'required');
        $this->form_validation->set_rules('passconf', 'Password Confirmation', 'required|matches[password]');             
        $this->form_validation->set_error_delimiters('<p class="ajax_error">', '</p>');	
    }    
    
    
    public function forgot_pass(){
       $method = $_SERVER['REQUEST_METHOD'];
        // ajaxAuthorized();
        $email       = $this->input->post('forgot_mail');    
        
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { 	
            echo ajaxRespond('Fail', '<p class="ajax_error">Invalid email address!</p>');
            exit;
        } 
                                 
       $is_exist    = $this->db->get_where('users',['email' => $email]);
       
       if($is_exist->num_rows() > 0){
          
           $hash_email =  password_encription($email); 
           
           $array = [
               'Status'  => 'OK',
               '_token'  => $hash_email,
               'Msg'     => '<p class="ajax_success">Reset password link sent to your email </p>'
           ];  
           
           $api_data = [
               'Status'  => 'OK',
               '_token'  => $hash_email,
               'Msg'     => 'Reset password link sent to your email'
           ]; 
           
                if($method != 'POST'){
                    json_output_display(400,array('status' => 400,'message' => 'Bad request.'));
                } else {
                    if($this->input->get('device_code', TRUE)){
                        if( DEVICE_AUTH == $this->input->get('device_code', TRUE) && $method == 'POST' ) {
                           json_output_display( 200 ,$api_data);                                      
                        }
                         exit;
                    } 
                } 

           
           
           echo json_encode($array);
        } else {
           echo ajaxRespond('Fail', '<p class="ajax_error">Email address not found!</p>');
       }
       
    }
    
    public function reset_password(){
        $this->load->view('frontend/header'); 
        $this->load->view('my_account/reset_pass');
        $this->load->view('frontend/footer');
    }
    
    public function reset_password_action(){
       
        $reset_token = $this->input->post('verify_token');
        $email      = $this->input->post('email');
        
        $new_pass   = trim($this->input->post('new_password'));
        $re_pass    = trim($this->input->post('retype_password'));
        
        if(!password_verify($email, $reset_token)){                    
            echo ajaxRespond('Fail', '<p class="ajax_error">Token Not Match</p>');
            exit;
        }
                
        if($new_pass != $re_pass){
            echo ajaxRespond('Fail', '<p class="ajax_error">Not Match</p>');
            exit;
        }        
                
        $hash_pass  = password_encription($new_pass);
               
        $this->db->set('password',$hash_pass);
        $this->db->where('email', $email);
        $this->db->update('users'); 
        
        ob_start();
        // Run Auto Login here
        echo ajaxRespond('OK', '<p class="ajax_success">Successfully updated</p>');        
        $newdata = array(
                'username'      => $email,
                'password'      => $new_pass
        );       
        $this->session->set_flashdata( 'login', $newdata);
        redirect('auth/login');        
        ob_clean();
        
        
                                                                                                    
    }
       
    
     private function  login_history( $user_id  =  null, $role_id = 0 ) {
        $this->load->library('user_agent');
        if ($this->agent->is_browser()){
            $agent = $this->agent->browser();
        } elseif ($this->agent->is_robot()) {
            $agent = $this->agent->robot();
        }  elseif ($this->agent->is_mobile()) {
            $agent = $this->agent->mobile();
        } else {
             $agent = 'Unidentified User Agent';
        }
       
        
        
        $history = [
            'user_id'       => $user_id,
            'login_time'    => date('Y-m-d H:s:i'),            
            'ip'            => getenv('REMOTE_ADDR'),          
             'role_id' 	=> $role_id,
            'browser'       => $agent,
            'device'        => $this->agent->platform(),
        ];
        
        
        $this->db->insert('login_history', $history );
        return $this->db->insert_id();
        
    }
    
    private  function logout_history(){
        $id = getLoginUserData('history');
        $history = [            
            'logout_time'      => date('Y-m-d H:i:s')
        ];        
        
        $this->db->where('id', $id );
        $this->db->update('login_history', $history );
    }
    
    
}


/*

    public function index__not_in_use() {
        //ajaxAuthorized();  
        $cookie_name = getLoginUserData('name');
        $cookie_user_id = getLoginUserData('user_id');
        $session_name = getSessionUserData('name');
        $session_user_id = getLoginUserData('user_id');

        if (!empty($_SESSION) && !empty($_COOKIE)) {
            if (!empty(session_id()) && session_id() != '' && !empty($_COOKIE['ci_session_']) && $_COOKIE['ci_session_'] != '' && session_id() == $_COOKIE['ci_session_']) {
                if (!empty($cookie_name) && !empty($session_name) && !empty($cookie_user_id) && !empty($session_user_id)) {

                    if ($cookie_name == $session_name && $session_user_id == $cookie_user_id) {
                        redirect(base_url(Backend_URL));
                    } else {
                        redirect(base_url(Backend_URL));
                    }
                } else {
                    redirect(base_url(Backend_URL));
                }
            } else {
                redirect(base_url(Backend_URL));
            }
        } else {
            redirect(base_url(Backend_URL));
        }
    }

*/	









